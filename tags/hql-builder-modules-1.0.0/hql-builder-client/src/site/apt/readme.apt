HQL Builder configureren voor een project

 vervang alle variabelen $... door de gepaste waarde

 * om HQL Builder gemakkelijk te kunnen draaien met de laatste model-aanpassingen is het best om een Maven/Eclipse project te maken met als naam hql-builder-$projectnaam

 * daarin zet je de pom met als inhoud

+----------------------------------------------------------------+
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>${project.group.id}</groupId>
	<artifactId>hql-builder-${projectnaam}</artifactId>
	<name>HQL Builder ${projectnaam}</name>
	<version>${hql-builder-versie}</version>
	<dependencies>
		<dependency>
			<groupId>be.ugent.hqlbuilder</groupId>
			<artifactId>hqlbuilder</artifactId>
			<version>${hql-builder-versie}</version>
		</dependency>
		<dependency>
			${dependency naar project-service (maw inclusief model en Hibernate cfg)}
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2-beta-3</version>
				<configuration>
					<descriptors>
						<descriptor>${basedir}/src/assemblies/bin-with-dependencies.xml</descriptor>
					</descriptors>
					<tarLongFileMode>gnu</tarLongFileMode>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<!-- conflicts with classpath in manifest -->
						<index>false</index>
						<manifest>
							<mainClass>be.ugent.hqlbuilder.${projectnaam}.HqlBuilder</mainClass>
							<packageName>be.ugent.hqlbuilder</packageName>
							<addExtensions>false</addExtensions>
							<addClasspath>true</addClasspath>
							<classpathPrefix>./</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
+----------------------------------------------------------------+

 * maak de directory src/main/java met daarin de class "be.ugent.hqlbuilder.$projectnaam.HqlBuilder" - deze is om de client te starten specifiek voor het project - met als inhoud

+----------------------------------------------------------------+
package be.ugent.hqlbuilder.${projectnaam};
public class HqlBuilder {
    public static void main(final String[] args) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                be.ugent.hqlbuilder.HqlBuilderFrame.start(args);
            }
        });
    }
}
+----------------------------------------------------------------+

 * in dezelfde directory als HqlBuilder maak je de volgende class aan met inhoud; de implementatie is project specifiek maar is geldig voor Oasis en Prospect

+----------------------------------------------------------------+
package be.ugent.hqlbuilder.${projectnaam};
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.hibernate.SessionFactory;
import be.ugent.hqlbuilder.DefaultHqlBuilderHelper;
import be.ugent.hqlbuilder.EntityDiscovery;
public class HqlBuilderHelper extends DefaultHqlBuilderHelper {
    private static Properties cfgprops = new Properties();
    static {
        try {
            InputStream inStream = HqlBuilderHelper.class.getResourceAsStream("/hqlbuilder.properties");
            cfgprops.load(inStream);
            inStream.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
    }
    @Override
    public EntityDiscovery getEntityDiscovery() {
        try {
            return (EntityDiscovery) Class.forName(cfgprops.getProperty("hibernate.entityDiscovery.class")).newInstance();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
    @Override
    public String getHibernateConfiguration() {
        return cfgprops.getProperty("hibernate.configuration");
    }
    @Override
    public String getPersistenceContext() {
        return cfgprops.getProperty("hibernate.persistence.context");
    }
    @Override
    public String getResourceLocationAllDataSources() {
        if (!cfgprops.containsKey("resource.location.all") || cfgprops.getProperty("resource.location.all") == null) {
            return null;
        }
        return cfgprops.getProperty("resource.location.all").replaceAll("\\Q${user.home}\\E", System.getProperty("user.home").replace('\\', '/'));
    }
    @Override
    public String[] getResourceLocations() {
        List<String> cfgs = new ArrayList<String>();
        try {
            int index = 0;
            while (true) {
                String key = "resource.location[" + index + "]";
                String string = cfgprops.getProperty(key).toString()
                        .replaceAll("\\Q${user.home}\\E", System.getProperty("user.home").replace('\\', '/'));
                System.out.println("resource: " + key + " > " + string);
                cfgs.add(string);
                index++;
            }
        } catch (NullPointerException ex) {
            //
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return cfgs.toArray(new String[cfgs.size()]);
    };
    @Override
    public boolean accept(Class<?> type) {
        return true;
    }
    @Override
    public String getHelpUrl() {
        return cfgprops.getProperty("help");
    }
    @Override
    public void onFirstSessionReady(SessionFactory sessionFactory) {
    }
}
+----------------------------------------------------------------+

 * maak nu de directory src/main/resources, maak de file met naam "be.ugent.hqlbuilder.$projectnaam.IHqlBuilderHelper" (dus niet in subdirectory) met als inhoud

+----------------------------------------------------------------+
be.ugent.hqlbuilder.$projectnaam.HqlBuilderHelper
+----------------------------------------------------------------+

 * maak in diezelfde directory een propertyfile aan "hqlbuilder.properties" met als inhoud, indien de hibernate properties over meerdere propertyfiles verspreid staan dan kan resource.location[1], resource.location[2], etc. opgegeven worden in deze prioriteit

+----------------------------------------------------------------+
hibernate.entityDiscovery.class=be.ugent.hqlbuilder.ConfigurationEntityDiscovery
hibernate.configuration=$path_naar_/hibernate.cfg.xml
hibernate.persistence.context=$path_naar_/persistence-context.xml
help=https://ronin.ugent.be/wiki/index.php/HqlBuilder
resource.location[0]=$propertyfile_met_hql_connection
+----------------------------------------------------------------+

 * dat is het, draai "mvn eclipse:eclipse" of gebruik de Maven plugin in de IDE en je kan de Hql Builder voor je project starten met HqlBuilder van hierboven